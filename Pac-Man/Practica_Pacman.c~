/*
 * PracticaPacman.c
 *
 * Created: 5/3/2023 8:26:23 AM
 * Author: Antonio
 */


#asm
        .equ __lcd_port=0xb
        .equ __lcd_EN=3
        .equ __lcd_RS=2
        .equ __lcd_D4=4
        .equ __lcd_D5=5
        .equ __lcd_D6=6
        .equ __lcd_D7=7
#endasm

#include <mega328p.h>
#include <delay.h>
#include <display.h>

// Voltage Reference: AVCC pin
#define ADC_VREF_TYPE ((0<<REFS1) | (1<<REFS0) | (0<<ADLAR))

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input | ADC_VREF_TYPE;
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=(1<<ADSC);
// Wait for the AD conversion to complete
while ((ADCSRA & (1<<ADIF))==0);
ADCSRA|=(1<<ADIF);
return ADCW;
}


signed char i;
unsigned char PacMan1[8] = {0x0E,0x1D,0x1E,0x1C,0x1E,0x1F,0x0E,0x00};
unsigned char PacMan2[8] = {0x0E,0x1D,0x1F,0x1E,0x1F,0x1F,0x0E,0x00};

void delayPacman()
{
    delay_ms(read_adc(0)/4);   //read adc del canal(0)

}
void main(void)
{
    DDRC.1=0;
    PORTC.1=1;
    SetupLCD();
    CreateChar(0,PacMan1);
    CreateChar(1,PacMan2);
   
    // ADC initialization
    // ADC Clock frequency: 125.000 kHz
    // ADC Voltage Reference: AVCC pin
    // ADC Auto Trigger Source: ADC Stopped
    // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
    // ADC4: On, ADC5: On
    DIDR0=(0<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
    ADMUX=ADC_VREF_TYPE;
    ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
    ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 
     
    while (1)
        {
            MoveCursor(5,0);
            StringLCD("Hello");  
            MoveCursor(3,1);
            StringLCD("Mr. PacMan");  
            
            while(PINC.1==1){
                  for (i=Cont;i<16;i++)
                {
                if (PINC.1==0)
                   { 
                    Cont=i;
                    break;
                   }  
                MoveCursor(i,0);  //Paso1
                CharLCD(0);       //Paso2
                delayPacman();    
                MoveCursor(i,0);  //Paso3
                CharLCD(1);       //Paso4
                delayPacman();    
                MoveCursor(i,0);  //Paso5
                CharLCD(' ');      //Paso6
                }
           
            for (i=Cont;i<16;i++)
            {    
                if (PINC.1==0)
                   { 
                    Cont=i;
                    break;
                   }  
                MoveCursor(i,1);  //Paso1
                CharLCD(0);       //Paso2
                delayPacman();    
                MoveCursor(i,1);  //Paso3
                CharLCD(1);       //Paso4
                delayPacman();    
                MoveCursor(i,1);  //Paso5
                CharLCD(' ');      //Paso6
 
            }
            }
            while(PINC.1==0)
            { 
               for (i=Cont;0<i;i--)
            {    if (PINC.1==0)
                   {  
                   Cont=i;
                    break;
                   }  
                MoveCursor(i,0);  //Paso1
                CharLCD(0);       //Paso2
                delayPacman();    
                MoveCursor(i,0);  //Paso3
                CharLCD(1);       //Paso4
                delayPacman();    
                MoveCursor(i,0);  //Paso5
                CharLCD(' ');      //Paso6
 
            }
           
            for (i=Cont;0<i;i--)
            {   
              if (PINC.1==0)
                   {  
                   Cont=i;
                    break;
                   }  
                MoveCursor(i,1);  //Paso1
                CharLCD(0);       //Paso2
                delayPacman();    
                MoveCursor(i,1);  //Paso3
                CharLCD(1);       //Paso4
                delayPacman();    
                MoveCursor(i,1);  //Paso5
                CharLCD(' ');      //Paso6
 
            }
               }
            

        }
}